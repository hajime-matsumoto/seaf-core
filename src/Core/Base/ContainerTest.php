<?php
namespace Seaf\Core\Base;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-03-06 at 08:05:32.
 */
class ContainerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Container
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Container(array('a'=>'b','c'=>'d'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Seaf\Core\Base\Container::init
     * @todo   Implement testInit().
     */
    public function testInit()
    {
        $this->object->init(array('e'=>'f','g'=>'h'));
    }

    /**
     * @covers Seaf\Core\Base\Container::set
     * @todo   Implement testSet().
     */
    public function testSet()
    {
        $this->object->set('i', 'j');
    }

    /**
     * @covers Seaf\Core\Base\Container::get
     * @todo   Implement testGet().
     */
    public function testGet()
    {
        $this->assertEquals('b', $this->object->get('a'));
    }

    /**
     * @covers Seaf\Core\Base\Container::del
     * @todo   Implement testDel().
     */
    public function testDel()
    {
        $this->object->del('a');
        $this->assertEquals(null, $this->object->get('a',null));
    }

    /**
     * @covers Seaf\Core\Base\Container::update
     * @todo   Implement testUpdate().
     */
    public function testUpdate()
    {
        $this->object->update('a','x');
        $this->assertEquals('x', $this->object->get('a',null));
    }

    /**
     * @covers Seaf\Core\Base\Container::has
     * @todo   Implement testHas().
     */
    public function testHas()
    {
        $this->assertTrue($this->object->has('a'));
        $this->assertFalse($this->object->has('z'));
    }

    /**
     * @covers Seaf\Core\Base\Container::rewind
     * @todo   Implement testRewind().
     */
    public function testRewind()
    {
        $this->object->rewind();
    }

    /**
     * @covers Seaf\Core\Base\Container::valid
     * @todo   Implement testValid().
     */
    public function testValid()
    {
        $this->assertTrue(is_string($this->object->valid()));
    }

    /**
     * @covers Seaf\Core\Base\Container::next
     * @todo   Implement testNext().
     */
    public function testNext()
    {
        $this->assertEquals('d',$this->object->next());
        $this->assertFalse($this->object->next());
    }

    /**
     * @covers Seaf\Core\Base\Container::current
     * @todo   Implement testCurrent().
     */
    public function testCurrent()
    {
        $this->assertEquals('b',$this->object->current());
    }

    /**
     * @covers Seaf\Core\Base\Container::key
     * @todo   Implement testKey().
     */
    public function testKey()
    {
        $this->assertEquals('a',$this->object->key());
    }
}
